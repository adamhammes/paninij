plugins {
  id 'java'
  id 'net.ltgt.apt' version '0.9'
}

static boolean isMacOsX() {
  System.properties['os.name'].toLowerCase().contains('mac os x')
}

def langJar = project(':core:lang').jar.archivePath

// The dir which will hold compiled library targets (e.g. the agent lib).
def cppDir = file("build/cpp")

task makeCppDir
makeCppDir.doLast {
  cppDir.mkdirs()
}

task makefiles(type: Exec, dependsOn: makeCppDir) {
  description = 'Uses CMake to initialize the build directory.'
  executable = 'cmake'
  args = ['-G', 'Unix Makefiles',
          '-D', "PANINIJ_LANG_JAR=${langJar}",
          '-D', 'CMAKE_BUILD_TYPE=Debug', projectDir]
  workingDir = cppDir
  logging.captureStandardOutput LogLevel.INFO
}

task makeAgent(type: Exec, dependsOn: [makefiles, ':core:lang:jar']) {
  workingDir cppDir
  commandLine 'make', 'agent'
  logging.captureStandardOutput LogLevel.INFO
}
task lib(dependsOn: makeAgent)
build.dependsOn lib


sourceSets {
  test {
    java {
      srcDir "$projectDir/itest"
    }
  }
}

dependencies {
  testCompile project(':core:proc')
  testCompile project(':core:lang')
}

def integrationTests = [
  'it1',
  'it2',
  'it3',
  'it4',
]

// For each named integration test create a `JavaExec` tasks to run it:
integrationTests.each { testPkg ->
  def taskName = testPkg
  task "$taskName" (type:JavaExec, dependsOn: [makeAgent]) {
    main = "${testPkg}/IT"
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs '-agentlib:agent'
    enableAssertions = true
    environment(isMacOsX() ? 'DYLD_LIBRARY_PATH' : 'LD_LIBRARY_PATH', cppDir)
  }
  check.dependsOn(tasks[taskName])
}


// CMake v3.6 recommends that a subdirectory of the source directory not be
// used, so we use a sibling directory instead.
def eclipseBuildDir = "$projectDir/../agent-eclipse"

task eclipse(type: Exec) {
  description = 'Uses CMake to initialize an Eclipse project.'
  workingDir eclipseBuildDir
  commandLine 'cmake', '-G', 'Eclipse CDT4 - Unix Makefiles',
                       '-D', "PANINIJ_LANG_JAR=${langJar}",
                       '-D', 'CMAKE_BUILD_TYPE=Debug', projectDir
}
eclipse.doFirst {
  new File(eclipseBuildDir).mkdirs()
}
