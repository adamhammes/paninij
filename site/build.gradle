plugins {
  id 'base'
  id 'org.ajoberstar.github-pages' version '1.5.1'
}

def siteDir = "$buildDir/site/"
def ghpagesRepoUri = 'git@github.com:paninij/paninij.github.io.git'
def jekyllSrcDir = "$projectDir/src"

task javadoc(type: Copy) {
  description = "Copy public javadocs into the site's build directory."
  def publicJavadocTask = tasks.getByPath(':core:lang:javadoc')
  dependsOn publicJavadocTask
  from publicJavadocTask.destinationDir
  into "$siteDir/docs/javadoc"
}
//assemble.dependsOn javadoc

task jekyll(type: Exec, dependsOn: javadoc) {
  description = "Use Jekyll CLI tool to build the site."
  commandLine 'jekyll', 'build',
  		'--source', jekyllSrcDir,
		'--destination', siteDir,
  standardOutput = new ByteArrayOutputStream()  // Ignore STDOUT.
}
//assemble.dependsOn jekyll

task jekyllServe(type: Exec, dependsOn: javadoc) {
  description = "Use Jekyll CLI tool to build the site and serve it locally."
  commandLine 'jekyll', 'serve',
  		'--source', jekyllSrcDir,
		'--destination', siteDir
}

task htmlProofer(type: Exec, dependsOn: assemble) {
  description = "Use `htmlproofer` CLI tool to check the site."
  commandLine 'htmlproofer', siteDir,
  		'--allow-hash-href',
		'--file-ignore', $//\/docs\/javadoc\///$
  standardOutput = new ByteArrayOutputStream()  // Ignore STDOUT
}
//check.dependsOn htmlProofer

project.ext['org.ajoberstar.grgit.auth.force'] = 'sshagent'
// GitHub Pages authentication is done with SSH via `ssh-agent`.
githubPages {
  description = "Deploy site to GitHub Pages site."
  repoUri = ghpagesRepoUri
  targetBranch = 'master'
  pages {
    from siteDir
  }
}
publishGhPages.dependsOn build

task deploy() {
  dependsOn publishGhPages
}
