package org.paninij.apt.util;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.TypeKind;
import javax.lang.model.util.Types;

import org.paninij.apt.PaniniPress;


/**
 * Note that a duck shape has a void return type if and only if `returnType` is set to `null`.
 */
public class DuckShape
{
    public final DeclaredType returnType;
    public final List<VariableElement> parameters;
    private final Types typeUtils;

    public static DuckShape make(PaniniPress context, ExecutableElement method)
    {
        DeclaredType returnType;
        if (ModelInfo.hasVoidReturnType(method))
        {
            returnType = null;
        }
        else
        {
            returnType = (DeclaredType) method.getReturnType();
        }

        List<VariableElement> params = new ArrayList<VariableElement>();
        for (VariableElement param : method.getParameters())
        {
            params.add(param);
        }

        return new DuckShape(returnType, params, context.getTypeUtils());
    }


    public DuckShape(DeclaredType returnType, List<VariableElement> parameters, Types typeUtils)
    {
        // The `typeUtils` argument is required in order to implement `equals()` correctly.
        assert(parameters != null);
        assert(returnType != null);
        this.returnType = returnType;
        this.parameters = parameters;
        this.typeUtils = typeUtils;
    }


    @Override
    public int hashCode()
    {
        //TODO: rework this function (does it actually do what we thing it does?)
        // This implementation auto-generated by Eclipse.
        final int prime = 31;
        int result = 1;
//        result = prime * result + ((parameters == null) ? 0 : parameters.hashCode());
//        result = prime * result + ((returnType == null) ? 0 : returnType.hashCode());
        result = prime * result + this.toString().hashCode();
        return result;
    }


    @Override
    public boolean equals(Object obj)
    {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }

        DuckShape other = (DuckShape) obj;
        //TODO: Handle nulls
        if (this.parameters.size() != other.parameters.size())
        {
            return false;
        }
        else
        {
            for(int i = 0; i < this.parameters.size(); i++)
            {
                if(!typeUtils.isSameType(this.parameters.get(i).asType(), other.parameters.get(i).asType()))
                {
                    return false;
                }
            }
        }
        
        

        if (returnType == null)
        {
            if (other.returnType != null) {
                return false;
            }
        }
        else if (!typeUtils.isSameType(returnType, other.returnType))
        {
            return false;
        }
        return true;
    }


    public String toString()
    {
        String ret = getSimpleReturnType() + "$Duck";
        
        if(parameters.size() == 0)
        {
            ret += "$void";
        }
        else
        {
            for(VariableElement param : parameters)
            {
                if(param.asType().getKind() == TypeKind.ARRAY)
                {
                    ret += "$" + Source.dropPackageName(param.asType().toString()).replace("[]", "Arr");
                }
                else
                {
                    ret += "$" + Source.dropPackageName(param.asType().toString());
                }
                
            }
        }
        
        return ret;
    }
    
    public Set<String> getUniqueParameterTypes()
    {
        Set<String> set = new HashSet<String>();
        
        for(VariableElement param : this.parameters)
        {
            set.add(param.asType().toString());
        }
        return set;
    }

    
    /**
     * Returns the name of the return type associated with the duck shape. If there is no return
     * type (i.e. `returnType == null`) then "void" is returned.
     */
    public String getSimpleReturnType()
    {
        if (returnType == null) {
            return "void";
        } else {
            return Source.dropPackageName(returnType.toString());
        }
    }
    
    /**
     * Returns the fully qualified name of the return type associated with the duck shape. If there
     * is no return type (i.e. `returnType == null`) then "void" is returned.
     */
    public String getQualifiedReturnType()
    {
        if (returnType == null) {
            return "void";
        } else {
            return returnType.toString();
        }
    }
    

    public enum Category
    {
        NORMAL,
        VOID,
        FINAL,
        ARRAY,
        FINALARRAY,
        PRIMITIVE,
        PANINICUSTOM
    }
    /*
    public Set<String> getRequiredClasses()
    {
        //Get Type parameters, Array types, parameter types, and return types
        Set<String> classes = new HashSet<String>();
        ModelInfo.recurseTypes(this.returnType.asElement(), classes);
        for(VariableElement param : this.parameters)
        {
            ModelInfo.recurseTypes(param, classes);
        }
        return classes;
    }
    */
    public static DuckShape.Category categoryOf(DuckShape duckShape)
    {
        // TODO: Add checks for all categories
        if (duckShape.returnType == null)
        {
            return Category.VOID;
        }
        else if (ModelInfo.isFinalType(duckShape.returnType))
        {
            return Category.FINAL;
        }
        else
        {
            return Category.NORMAL;
        }

    }
}
